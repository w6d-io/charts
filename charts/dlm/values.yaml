name: &name dlm
fullnameOverride: *name
nameOverride: *name

global:
  podSecurityPolicy:
    enabled: false
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  metrics:
    path: '/metrics'
    port: 8080

webhook:
  config:
    listen:
      probe: ":8081"
      metrics: ":8082"
    webhook:
      host: ""
      port: 9443
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75
  defaultContainer: webhook
  extraArgs: []
  extraEnv: []
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 8081
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /readyz
      port: 8081
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  replicaCount: 2
  resources: {}
  securityContext: {}
  strategy: {}
  tolerations: {}
  service:
    annotations: {}
    type: ClusterIP

controller:
  config:
    listen:
      api: ":8080"
      probe: ":8081"
      metrics: ":8082"
    election:
      enabled: true
      resourceName: ""
      namespace: ""
    redis:
      address: localhost
      port: 6379
      password: "password"
    upgrades:
#      - application: app
#        image: liquibase
  api:
    port: 8080
    service:
      annotations: {}
      type: ClusterIP
  affinity: {}
  defaultContainer: controller
  extraArgs: []
  extraEnv: []
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 8081
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /readyz
      port: 8081
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  replicaCount: 2
  resources: {}
  securityContext: {}
  strategy: {}
  tolerations: {}


rules: {}

image:
  repository: 'w6d/dlm'
  tag: ''
  pullPolicy: IfNotPresent

serviceAccount:
  create: true
  token: true
  annotations: {}

pdb:
  enabled: false

vault:
  enabled: false
  url: "-"
  envFrom:
    enabled: false
    path: "-"

linkerd:
  enabled: false