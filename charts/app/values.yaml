---
replicaCount: 1

name: "-"

global:
  id: ""
  namespace: ""
  database:
    host: ""
    adminpassword: ""
    password: ""
    postgres_password: ""
    component: ""
  domain:
    kafka: ""
    auth0: ""
    s3: ""
    uam: ""
    tfds: ""
    tfd: ""
  generateSecret:
    enabled: false

liquibase:
  enabled: false
  env: |-
    - name: DB_DATABASE
      value: {{ include "global.database.database" . | quote }}
    - name: DB_HOST
      value: {{ include "global.database.host" .  | quote }}
    - name: DB_PORT
      value: "5432"
    - name: DB_USERNAME
      value: {{ include "global.database.adminuser" . | quote }}
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: dlm-postgres-password
          name: {{ include "common.names.fullname" $ }}-db
    - name: DB_VERSION
      value: {{ (coalesce .Values.dbversion .Values.version .Chart.AppVersion) | quote }}
  resources: {}
  command:
    - bash
    - -c
    - |
      set -e
      cd /db
      if [ -z "${DB_VERSION}" ]
      then
        liquibase --url jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE} \
            --username ${DB_USERNAME} \
            --password ${DB_PASSWORD} \
            update
      else
          liquibase --url jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE} \
            --username ${DB_USERNAME} \
            --password ${DB_PASSWORD} \
              update-to-tag ${DB_VERSION}
      fi

## add revision in annotation to force restart on rollout
revision:
  enabled: false

image:
  repository: 'nginx'
  tag: 'alpine'

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "app"

role:
  rules: null

podSecurityPolicy:
  enabled: false

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

networkPolicies: []
  # - name: allow-http # must respect the dns format
  #   types:
  #     - Ingress
  #     - Egress
  #   ingress:
  #   - from:
  #     - namespaceSelector:
  #         matchLabels:
  #           project: myproject
  #     ports:
  #     - protocol: TCP
  #       port: 8080
  #   egress:
  #   - to:
  #     - podSelector:
  #         matchLabels:
  #           app: redis
  #     ports:
  #     - protocol: TCP
  #       port: 6379

lifecycle:
  enabled: false

annotations: {}

podLabels: {}

initContainers: []

resources: {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 10m
#    memory: 128Mi

service:
  name: "-"
  internalPort: 8080
  externalPort: 8080
  type: ClusterIP

externalsvc: {}

ingress:
  enabled: false
  host: ''
  path: /
  issuer: ''
  class: 'nginx'
  prefix: 'nginx.ingress.kubernetes.io'
  className: ''         # ingressClassName field https://kubernetes.github.io/ingress-nginx/#what-is-ingressclassname-field
  extraPaths: []

cert:
  enabled: false
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: letsencrypt-prod
  secretName: ""
  dnsNames: []
  # - example.net
  # - example.com
  # - example.io

persistence: []
livenessProbe: {}
readinessProbe: {}

metrics:
  enabled: false
  path: '/metrics'
  port: 8080

env: "-"
# env: |
#   - name: PG_HOST
#     value: {{ include "global.database.host" .  | quote }}
#   - name: PG_DATABASE
#     value: {{ include "global.database.database" . | quote }}
#   - name: PG_USERNAME
#     value: {{ include "global.database.username" . | quote }}

configs: []
# - key: 'config.yaml'
#   value: |
#     ---
#     data: 'inconfig'
#   name: CONFIG
#   path: /data/cfg

secrets: []
#  - name: PASSWORD
#    value: 'my_password'
#    kind: 'env'
#    key: 'password'
#  - key: 'secret.yaml'
#    value: |
#      ---
#      secret:
#        address: https://localhost
#        password: XjXg2tCtYBDxBRze8Lqa
#    name: SECRET
#    kind: 'volume'

nodeSelector: {}

volumeMounts: {}
volumes: {}

autoscaling:
  enabled: false
#  minReplicas: 1
#  maxReplicas: 100
#  targetCPUUtilizationPercentage: 80

extraResources: ""
# extraResources: |-
#  - apiVersion: networking.k8s.io/v1
#    kind: Ingress
#    metadata:
#      labels:
#        {{- include "common.labels.standard" . | nindent 4 }}
#          {{- with .Values.ingress.annotations }}
#          annotations:
#            {{- toYaml . | nindent 4 }}
#          {{- end }}
#      name: {{ include "common.names.fullname" $ }}
#    spec:
#      ingressClassName: ing-w6d
#      rules:
#      - host: test.w6d.io
#        http:
#          paths:
#          - backend:
#              service:
#                name: test
#                port:
#                  number: 8080
#            path: /
#            pathType: Prefix
#      tls:
#      - hosts:
#        - test.w6d.io

mongodb:
  install: false

redis:
  install: false
