NAME: eam
LAST DEPLOYED: Thu Jul 28 12:39:52 2022
NAMESPACE: apiea
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
---
# Source: app/templates/dbsecrets/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: apiea-secret
---
# Source: app/templates/liquibase/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
  name: eam-init
type: Opaque
data:
  postgres-password: YWRtaW4=
---
# Source: app/templates/dbsecrets/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: apiea-script
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  create-secrets: |
    # vim: set filetype=sh:
    
    namespace=apiea
    release=eam
    
    pushd $(mktemp -d)
    
    function label_secret(){
      local secret_name=$1
      local strada_name=$2
      kubectl --namespace=$namespace label \
        --overwrite \
        secret $secret_name "app.kubernetes.io/managed-by"="Helm" "strada.fr/name"="$strada_name" helm.sh/chart=app-2.1.0 strada.fr/name=apiea strada.fr/instance=eam strada.fr/customerid=default-id createdfor="strada" strada.fr/managed-by=Helm strada.fr/label=""
      kubectl --namespace=$namespace annotate \
        --overwrite \
        secret $secret_name "meta.helm.sh/release-name"=eam "meta.helm.sh/release-namespace"=$namespace
    }
    
    # Args: secret_name, args
    function create_secret_if_needed(){
      local secret_args=( "${@:2}")
      local secret_name=$1
    
      if ! $(kubectl --namespace=$namespace get secret $secret_name > /dev/null 2>&1); then
        kubectl --namespace=$namespace create secret generic $secret_name ${secret_args[@]}
      else
        echo "secret \"$secret_name\" already exists."
          for arg in "${secret_args[@]}"; do
            local from=$(echo -n ${arg} | cut -d '=' -f1)
            if [ -z "${from##*literal*}" ]; then
              local key=$(echo -n ${arg} | cut -d '=' -f2)
              local desiredValue=$(echo -n ${arg} | cut -d '=' -f3-)
              local flags="--namespace=$namespace --allow-missing-template-keys=false"
              if ! $(kubectl $flags get secret $secret_name -ojsonpath="{.data.${key}}" > /dev/null 2>&1); then
                echo "key \"${key}\" does not exist. patching it in."
                if [ "${desiredValue}" != "" ]; then
                  desiredValue=$(echo -n "${desiredValue}" | base64 -w 0)
                fi
                kubectl --namespace=$namespace patch secret ${secret_name} -p "{\"data\":{\"$key\":\"${desiredValue}\"}}"
              fi
            fi
          done
      fi
    }
    
    create_secret_if_needed apiea --from-literal=postgres-password=admin
    create_secret_if_needed apiea --from-literal=dlm-postgres-password=admin
    label_secret apiea "apiea"
    
  delete_secrets: |
    # vim: set filetype=sh:
    
    namespace=apiea
    
    pushd $(mktemp -d)
    
    # Args: secret_name
    function delete_secret_if_needed(){
      local secret_name=$1
      if $(kubectl --namespace=$namespace get secret $secret_name > /dev/null 2>&1); then
        kubectl --namespace=$namespace delete secret $secret_name
      fi
    }
    
    delete_secret_if_needed apiea
---
# Source: app/templates/liquibase/dbinit_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: apiea-sql
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  01_create_database.sql: |
    -- Database
    CREATE DATABASE "{{db_name}}"
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'en_US.UTF-8'
    LC_CTYPE = 'en_US.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    TEMPLATE template0;
  02_create_role.sql: |
    -- Roles
    CREATE ROLE {{db_username}} WITH
    LOGIN
    INHERIT
    NOSUPERUSER
    NOCREATEDB
    NOCREATEROLE
    NOREPLICATION
    PASSWORD '{{db_password}}';
  
    CREATE ROLE {{db_admin_username}} WITH
    LOGIN
    INHERIT
    NOSUPERUSER
    NOCREATEDB
    NOCREATEROLE
    NOREPLICATION
    PASSWORD '{{db_admin_password}}';
  03_grant_privileges.sql: |
    -- Privileges
    --
  
    REVOKE CREATE on SCHEMA public FROM PUBLIC;
    REVOKE ALL ON DATABASE "{{db_name}}" FROM PUBLIC;
  
    -- create cap schema (pub/sub)
    CREATE SCHEMA cap;
  
    ---
    GRANT CREATE, CONNECT ON DATABASE "{{db_name}}" TO {{db_username}};
  
    -- readwrite in public schema
    GRANT USAGE, CREATE ON SCHEMA public TO {{db_username}};
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO {{db_username}};
    GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO {{db_username}};
    ALTER DEFAULT PRIVILEGES FOR ROLE {{db_admin_username}} IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO {{db_username}};
    ALTER DEFAULT PRIVILEGES FOR ROLE {{db_admin_username}} IN SCHEMA public GRANT USAGE ON SEQUENCES TO {{db_username}};
  
    -- readwrite in cap schema
    GRANT USAGE, CREATE ON SCHEMA cap TO {{db_username}};
    GRANT ALL ON ALL TABLES IN SCHEMA cap TO {{db_username}};
    GRANT ALL ON ALL SEQUENCES IN SCHEMA cap TO {{db_username}};
    ALTER DEFAULT PRIVILEGES FOR ROLE {{db_admin_username}} IN SCHEMA cap GRANT ALL ON TABLES TO {{db_username}};
    ALTER DEFAULT PRIVILEGES FOR ROLE {{db_admin_username}} IN SCHEMA cap GRANT ALL ON SEQUENCES TO {{db_username}};
  
    ---
    GRANT CREATE, CONNECT ON DATABASE "{{db_name}}" TO {{db_admin_username}};
  
    -- readwrite in public schema
    GRANT ALL ON SCHEMA public TO {{db_admin_username}};
    GRANT ALL ON ALL TABLES IN SCHEMA public TO {{db_admin_username}};
    GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO {{db_admin_username}};
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO {{db_admin_username}};
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO {{db_admin_username}};
  
    -- readwrite in cap schema
    GRANT ALL ON SCHEMA cap TO {{db_admin_username}};
    GRANT ALL ON ALL TABLES IN SCHEMA cap TO {{db_admin_username}};
    GRANT ALL ON ALL SEQUENCES IN SCHEMA cap TO {{db_admin_username}};
    ALTER DEFAULT PRIVILEGES IN SCHEMA cap GRANT ALL ON TABLES TO {{db_admin_username}};
    ALTER DEFAULT PRIVILEGES IN SCHEMA cap GRANT ALL ON SEQUENCES TO {{db_admin_username}};
  04_miscellaneous.sql: |
    -- Extension
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
---
# Source: app/templates/liquibase/dbinit_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: apiea-dbscript
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  initdb: |-
    # vim: set filetype=sh:
    
    set -e
    
    function is_var_exist() {
      if [ -z "$1" ]; then
        echo "Usage : is_var_exist <var_name>"
        exit 1
      fi
      local r=$(eval echo \$"$1")
      if [ -z "$r" ]
      then
        echo "$v is mandatory"
        exit 1
      fi
    }
    
    function is_database_exist() {
      local res=$(echo "SELECT json_agg(t) from (SELECT EXISTS(SELECT datname FROM pg_catalog.pg_database WHERE lower(datname) = lower('$db_name'))) t;" | psql -U postgres -t -h ${db_host} | jq '.[] | .exists')
      #local res=$(echo "SELECT EXISTS(SELECT datname FROM pg_catalog.pg_database WHERE lower(datname) = lower('$db_name'));" | psql -U postgres -h ${db_host})
      if [ "$?" != "0" ]; then
        return 1
      fi
      #local flag=$(echo $res | grep -B1 row | head -1 | awk '{print $1}')
      if [ "$res" = "true" ]; then
        return 0
      fi
      return 1
    }
    
    for v in db_host db_name db_username db_password db_admin_username db_admin_password PGPASSWORD component
    do
      is_var_exist $v
    done
    
    temp_file=$(mktemp new-XXX.sql)
    
    pushd $(mktemp -d)
    
    function exec_sql() {
      local file=$1
      local dbname=$2
      echo "templating $file"
      mo < "$file" > "${temp_file}"
      cat "${temp_file}"
      echo "running $file"
      psql -h "${db_host}" -d $dbname -U postgres -c "$(cat $temp_file)"
      if [ "$?" != "0" ]; then
        exit 1
      fi
    }
    
    if ! is_database_exist ; then
      exec_sql /sql/01_create_database.sql postgres
      exec_sql /sql/02_create_role.sql ${db_name}
      exec_sql /sql/03_grant_privileges.sql ${db_name}
      exec_sql /sql/04_miscellaneous.sql ${db_name}
    fi
    
    rm -f "$temp_file"
---
# Source: app/templates/dbsecrets/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
  name: role-apiea-secret
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
# Source: app/templates/dbsecrets/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
  name: rolebinding-apiea-secret
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-apiea-secret
subjects:
  - kind: ServiceAccount
    name: apiea-secret
    namespace: apiea
---
# Source: app/templates/dbsecrets/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: apiea-create-secrets
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  #  ttlSecondsAfterFinished: 5
  backoffLimit: 0
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        helm.sh/chart: app-2.1.0
        strada.fr/name: apiea
        strada.fr/instance: eam
        strada.fr/customerid: default-id
        createdfor: "strada"
        strada.fr/managed-by: Helm
        strada.fr/label: ""
    spec:
      serviceAccountName: apiea-secret
      restartPolicy: Never
      containers:
        - name: gen-secret
          image: "w6dio/kubectl:v1.4.0"
          command: ['/bin/bash', '/scripts/create-secrets']
          volumeMounts:
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: apiea-script
---
# Source: app/templates/dbsecrets/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: apiea-delete-secrets
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  #  ttlSecondsAfterFinished: 5
  backoffLimit: 0
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        helm.sh/chart: app-2.1.0
        strada.fr/name: apiea
        strada.fr/instance: eam
        strada.fr/customerid: default-id
        createdfor: "strada"
        strada.fr/managed-by: Helm
        strada.fr/label: ""
    spec:
      serviceAccountName: apiea-secret
      restartPolicy: Never
      containers:
        - name: delete-secret
          image: "w6dio/kubectl:v1.4.0"
          command: ['/bin/bash', '/scripts/delete_secrets']
          volumeMounts:
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: apiea-script
---
# Source: app/templates/liquibase/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: apiea-db-init
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  #  ttlSecondsAfterFinished: 5
  backoffLimit: 0
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        helm.sh/chart: app-2.1.0
        strada.fr/name: apiea
        strada.fr/instance: eam
        strada.fr/customerid: default-id
        createdfor: "strada"
        strada.fr/managed-by: Helm
        strada.fr/label: ""
    spec:
      restartPolicy: Never
      containers:
        - name: init-db
          env:
            - name: db_host
              value: "pg-stradatime-postgresql.postgresql-stradatime.svc.cluster.local"
            - name: db_name
              value: "apiea.apiea"
            - name: db_username
              value: "apiea_apiea_app"
            - name: db_password
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: "apiea"
            - name: db_admin_username
              value: "apiea_apiea_admin"
            - name: db_admin_password
              valueFrom:
                secretKeyRef:
                  key: dlm-postgres-password
                  name: "apiea"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: eam-init
            - name: component
              value: apiea
            - name: namespace
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: release
              value: eam
          image: "w6dio/liquibase:v0.2.0"
          command: ['/bin/bash', '/scripts/initdb']
          volumeMounts:
            - name: sql
              mountPath: /sql
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: apiea-dbscript
        - name: sql
          configMap:
            name: apiea-sql
MANIFEST:
---
# Source: app/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: apiea
---
# Source: app/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: role-apiea-svc
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - update
  - patch
---
# Source: app/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: role-apiea-pod
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - update
  - patch
---
# Source: app/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: rolebinding-apiea-svc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-apiea-svc
subjects:
- kind: ServiceAccount
  name: apiea
  namespace: apiea
---
# Source: app/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: rolebinding-apiea-pod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-apiea-pod
subjects:
- kind: ServiceAccount
  name: apiea
  namespace: apiea
---
# Source: app/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: apiea
spec:
  ports:
  - name: apiea
    port: 8080
    protocol: TCP
    targetPort: 80
  - name: metrics
    port: 9187
    protocol: TCP
    targetPort: metrics
  type: ClusterIP
  selector:
    app.kubernetes.io/name: apiea
    app.kubernetes.io/instance: eam
---
# Source: app/templates/workload.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  name: apiea
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: apiea
      app.kubernetes.io/instance: eam
  template:
    metadata:
      labels:
        app.kubernetes.io/name: apiea
        app.kubernetes.io/instance: eam
        app_group: SWA
        app_name: entity-admin
        createdfor: strada
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/configmap: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      serviceAccountName: apiea
      
      initContainers:
        - image: reg-ext.stradaworld.com/strada/stradaplatform/entityadminmodule/backend-db:v1.9.0-alpha.58
          imagePullPolicy: ""
          command:
            - bash
            - -c
            - |
              set -e
              cd /db
              if [ -z "${DB_VERSION}" ]
              then
                liquibase --url jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE} \
                    --username ${DB_USERNAME} \
                    --password ${DB_PASSWORD} \
                    update
              else
                  liquibase --url jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE} \
                    --username ${DB_USERNAME} \
                    --password ${DB_PASSWORD} \
                      update-to-tag ${DB_VERSION}
              fi
          name: liquibase
          env:
            - name: DB_DATABASE
              value: "apiea.apiea"
            - name: DB_HOST
              value: "pg-stradatime-postgresql.postgresql-stradatime.svc.cluster.local"
            - name: DB_PORT
              value: "5432"
            - name: DB_USERNAME
              value: "apiea_apiea_admin"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: dlm-postgres-password
                  name: apiea
            - name: DB_VERSION
              value: "v1.9.0-alpha.58"
        
      containers:
      - image: reg-ext.stradaworld.com/strada/stradaplatform/entityadminmodule/backend:alpine
        imagePullPolicy: ""
        name: apiea
        
        env:
          - name: PG_HOST
            value: "pg-stradatime-postgresql.postgresql-stradatime.svc.cluster.local"
          - name: PG_DATABASE
            value: "apiea.apiea"
          - name: PG_USERNAME
            value: "apiea_apiea_app"
          - name: PG_PORT
            value: "5432"
          - name: AUTH0_DOMAIN
            value: "https://strada-dev.eu.auth0.com/"
          - name: 'AUTH0_AUDIENCES'
            value: 'Strada.World.Admin,Strada.Admin.Entity,Strada.Tracking.Api,Strada.Admin.UsersAccess,Strada.Admin.Company,wCJAY1jyxVfUsyqefo2bZSYOWOAMuQHY,bi2IkbUWb7S5EkeU67zpg7k4RfJMjbKC,fQSmHjFpMlf95LhsRt4nvCB4BrtHgqCD,Strada.Admin.TenantManagement.Api,yYfesgRVSh84glAP7uKQWf5yHUZ4AqxU,Strada.Admin.License,CMoDr4g1rQBZacQxiciFpdi2lW5b5mRH'
          - name: STRADA_BASIC_USER
            value: stradabasic
          - name: Bus__SB_Server
            value: "kafka.kafka"
          - name: Bus__SB_SubName
            value: 'Strada.Admin.Entity.Api'
          - name: SERILOG__MIN_LEVEL
            value: 'information'
          - name: SERILOG__JSON_OUTPUT
            value: 'true'
          - name: PROMETHEUS__PORT
            value: '9187'
          - name: PROMETHEUS__GROUP
            value: 'SWA'
          - name: PG_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: apiea  
          
        resources:
          limits:
            cpu: 100m
            memory: 512Mi
          requests:
            cpu: 60m
            memory: 256Mi
        ports:
          - containerPort: 80
            name: apiea
            protocol: TCP
          - containerPort: 9187
            name: metrics
            protocol: TCP
---
# Source: app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: apiea
  labels:
    helm.sh/chart: app-2.1.0
    strada.fr/name: apiea
    strada.fr/instance: eam
    strada.fr/customerid: default-id
    createdfor: "strada"
    strada.fr/managed-by: Helm
    strada.fr/label: ""
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  ingressClassName: ing-strada
  tls:
    - hosts:
        - apiea.dev.stradatms.net
  rules:
    - host: apiea.dev.stradatms.net
      http:
        paths:
          - path: /
            backend:
              service:
                name: apiea
                port:
                  number: 8080
            pathType: Prefix
---
# Source: app/templates/namespace/namespace.yaml
---

NOTES:
Deployment information:
  - Kind          : deployment
  - Release       : eam
  - Chart         : app/2.1.0
  - Version       : v1.9.0-alpha.58
  - Service name  : apiea
  - Namespace     : apiea
  - image         : reg-ext.stradaworld.com/strada/stradaplatform/entityadminmodule/backend:v1.9.0-alpha.58
  - replicas      : 1
  - internal host : apiea.apiea.svc.cluster.local:8080
  - url           : https://apiea.dev.stradatms.net/
  - Ingress class : ing-strada
Labels:
    app_group: SWA
  app_name: entity-admin
  createdfor: strada
